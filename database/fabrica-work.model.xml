<?xml version="1.0" encoding="utf-8"?>
<project name="Fabrica Telephony">
  <artifacts>
    <artifact role="Entity" description="Entity generation">
      <output-file><![CDATA[E:\repository\fabrica\Fabrica.Work\Persistence\Entities\auto-entities.cs]]></output-file>
      <template><![CDATA[delimiters "$","$"




PrimaryKey(Model) ::= <<long>>
PrimaryKeyDefault(Model) ::= <<0>>

ForeignKey(Model) ::= <<long>>
ForeignKeyDefault(Model) ::= <<0>>

Uid(Model) ::= <<string>>
UidDefault(Model) ::= <<"">>

String(Model) ::= <<string>>
StringDefault(Model) ::= <<"">>

ShortString(Model) ::= <<string>>
ShortStringDefault(Model) ::= <<"">>

MediumString(Model) ::= <<string>>
MediumStringDefault(Model) ::= <<"">>

MediumText(Model) ::= <<string>>
MediumTextDefault(Model) ::= <<"">>

LongString(Model) ::= <<string>>
LongStringDefault(Model) ::= <<"">>

FullString(Model) ::= <<string>>
FullStringDefault(Model) ::= <<"">>

SecuredString(Model) ::= <<string>>
SecuredStringDefault(Model) ::= <<"">>

Note(Model) ::= <<string>>
NoteDefault(Model) ::= <<"">>


Integer(Model) ::= <<int>>
IntegerDefault(Model) ::= <<0>>

Long(Model) ::= <<long>>
LongDefault(Model) ::= <<0>>

Currency(Model) ::= <<decimal>>
CurrencyDefault(Model) ::= <<0>>

Decimal(Model) ::= <<decimal>>
DecimalDefault(Model) ::= <<0>>

DateTime(Model) ::= <<DateTime>>
DateTimeDefault(Model) ::= <<DateTime.MinValue>>

FutureDateTime(Model) ::= <<DateTime>>
FutureDateTimeDefault(Model) ::= <<DateTime.MaxValue>>

Boolean(Model) ::= <<bool>>
BooleanDefault(Model) ::= <<false>>

BooleanTrue(Model) ::= <<bool>>
BooleanTrueDefault(Model) ::= <<true>>

Code(Model) ::= <<string>>
CodeDefault(Model) ::= <<"">>


DataTypeName(Model) ::= <<$(Model.DataType)(Model)$>>
DataTypeDefault(Model) ::= <<$([Model.DataType,"Default"])(Model)$>>


OnPropertyChanged(Model) ::= <<		partial void On$Model.Name$Changed( $DataTypeName(Model)$ oldValue, $DataTypeName(Model)$ newValue );>>
OnExplicitPropertyChanged(Model) ::= <<		partial void On$Model.Name$Changed( $Model.DataType$ oldValue, $Model.DataType$ newValue );>>

RtoType(Model) ::= <<$if(Model.RtoScope)$[ModelMeta(Scope=PropertyScope.$Model.RtoScope$)]$else$ $endif$>>


ModelAttributeAlias(Model) ::= <<Alias=$if(Model.Alias)$"$Model.Alias$"$else$nameof($Model.Name$)$endif$>>
ModelAttributeResource(Model) ::= <<$if(Model.Resource)$, Resource="$Model.Resource$"$endif$>>
ModelAttributeReference(Model) ::= <<$if(Model.Reference)$, Reference=typeof($Model.Reference$)$endif$>>
ModelAttributeExplorer(Model) ::= <<$if(Model.Explorer)$, Explorer=typeof($Model.Explorer$)$endif$>>
ModelAttribute(Model) ::= <<[Model( $ModelAttributeAlias(Model)$$ModelAttributeResource(Model)$$ModelAttributeReference(Model)$$ModelAttributeExplorer(Model)$ )]>>

DetailsInit(Model) ::=
<<
$Model.Aggregates:AggregateMember()$
>>
AggregateMember(Model) ::= <<
$Model.Name$ = new Collection<$Model.DataType$>();

>>

Meta(Model) ::=
<<

public static class Meta
{
	$Model.AttributeNames:MetaMember()$
}

>>

MetaMember(Name) ::= <<public static readonly string $Name$ = "$Name$";

>>



ModuleOpen(Model) ::=
<<

// ReSharper disable CommentTypo
// ReSharper disable StringLiteralTypo
// ReSharper disable RedundantDefaultMemberInitializer
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable InconsistentNaming
// ReSharper disable ConvertToConstant.Local
// ReSharper disable FieldCanBeMadeReadOnly.Local
// ReSharper disable AutoPropertyCanBeMadeGetOnly.Local
// ReSharper disable ConvertToAutoProperty
// ReSharper disable UnusedParameter.Local
// ReSharper disable UnusedMember.Global
// ReSharper disable IdentifierTypo


/**************************************************************
AUTO GENERATED BY Fabrica Application Studio
DO NOT MODIFY THIS FILE
**************************************************************/

using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Fabrica.Models.Serialization;
using Fabrica.Models.Support;
using Fabrica.Persistence.Audit;
using Fabrica.Utilities.Text;
using Newtonsoft.Json;


namespace Fabrica.Work.Persistence.Entities
{

>>

ModuleClose(Model) ::=
<<


}

>>


ModelOpen(Model) ::=
<<


	[JsonObject(MemberSerialization.OptIn)]
	[Audit]
	$ModelAttribute(Model)$
    public partial class $Model.Name$ : BaseMutableModel<$Model.Name$>, INotifyPropertyChanged
    {

		$Meta(Model)$

		
        public $Model.Name$(): this(false)
        {
					
        }

        public $Model.Name$( bool added )
        {

			SuspendTracking( m =>
			{
				$DetailsInit(Model)$
			});
		
            if( added )
                Added();
				
        }			
		
		
>>

ModelOpenRoot(Model) ::=
<<


	[JsonObject(MemberSerialization.OptIn)]
	[Audit]	
	$ModelAttribute(Model)$
    public partial class $Model.Name$ : BaseMutableModel<$Model.Name$>, IRootModel, INotifyPropertyChanged
    {

		$Meta(Model)$

		
        public $Model.Name$(): this(false)
        {
					
        }

        public $Model.Name$( bool added )
        {

			SuspendTracking( m =>
			{
				$DetailsInit(Model)$
			});
		
            if( added )
                Added();
				
        }


>>


ModelOpenReference(Model) ::=
<<


	[JsonObject(MemberSerialization.OptIn)]
	$ModelAttribute(Model)$	
	public partial class $Model.Name$ : BaseReferenceModel, IExplorableModel
	{

		$Meta(Model)$

		
		public $Model.Name$()
		{
		}
		
		public $Model.Name$( string uid, long id=0)
		{
			_uid = uid;
			_id  = id;
		}		

				
>>

ModelOpenAggregate(Model) ::=
<<


	[JsonObject(MemberSerialization.OptIn)]
	[Audit]	
	$ModelAttribute(Model)$	
    public partial class $Model.Name$ : BaseMutableModel<$Model.Name$>, IAggregateModel, INotifyPropertyChanged
    {

		$Meta(Model)$

		
        public $Model.Name$(): this(false)
        {
					
        }

        public $Model.Name$( bool added )
        {

			SuspendTracking( m =>
			{
				$DetailsInit(Model)$
			});
		
            if( added )
                Added();
				
        }
		

>>


ModelOpenExplorableRoot(Model) ::=
<<


	[JsonObject(MemberSerialization.OptIn)]
	[Audit]	
	$ModelAttribute(Model)$
    public partial class $Model.Name$ : BaseMutableModel<$Model.Name$>, IRootModel, IExplorableModel, INotifyPropertyChanged
    {

		$Meta(Model)$

				
        public $Model.Name$(): this(false)
        {
					
        }

        public $Model.Name$( bool added )
        {

			SuspendTracking( m =>
			{
				$DetailsInit(Model)$
			});
		
            if( added )
                Added();
				
        }
		
		
>>


ModelOpenExplorer(Model) ::=
<<


	[JsonObject(MemberSerialization.OptIn)]
	$ModelAttribute(Model)$	
    public partial class $Model.Name$ : BaseReferenceModel, IExplorableModel
    {

		$Meta(Model)$

>>

ModelClose(Model) ::=
<<



	}		
	
	
>>


ModelCloseReference(Model) ::=
<<



	}		

	
>>


ModelCloseExplorer(Model) ::=
<<



	}		

	
>>

AttributeBody(Model) ::=
<<


		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $DataTypeName(Model)$ _$Model.Field$ = $DataTypeDefault(Model)$;
		$RtoType(Model)$		
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$ 
		{ 
			get { return _$Model.Field$; } 
			set { _$Model.Field$ = value; } 
		} 

>>


AttributeBodyDateTime(Model) ::=
<<


		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $DataTypeName(Model)$ _$Model.Field$ = $DataTypeDefault(Model)$;
		$RtoType(Model)$		
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			set { _$Model.Field$ = value; } 
		} 

		
>>


AttributeBodyId(Model) ::=
<<


		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $DataTypeName(Model)$ _$Model.Field$ = $DataTypeDefault(Model)$;			
		$RtoType(Model)$
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public override $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			protected set { _$Model.Field$ = value; } 
		} 


>>

AttributeBodyVersion(Model) ::=
<<


		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $DataTypeName(Model)$ _$Model.Field$ = $DataTypeDefault(Model)$;
		$RtoType(Model)$
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			protected set { _$Model.Field$ = value; } 
		} 

>>

AttributeBodyUid(Model) ::=
<<


		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $DataTypeName(Model)$ _$Model.Field$ = Base62Converter.NewGuid();
		$RtoType(Model)$		
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public override $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			set { _$Model.Field$ = value; } 
		} 


>>

AttributeBodyReadonly(Model) ::=
<<

		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $DataTypeName(Model)$ _$Model.Field$ = $DataTypeDefault(Model)$;
		$RtoType(Model)$		
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			protected set { _$Model.Field$ = value; } 
		} 

>>

AttributeBodyReferenceReq(Model) ::=
<<

		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $Model.DataType$ _$Model.Field$ = default!;
		$RtoType(Model)$		
		[Required]
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $Model.DataType$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			set { _$Model.Field$ = value; } 
		} 


>>

AttributeBodyReferenceOpt(Model) ::=
<<

		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $Model.DataType$? _$Model.Field$ = default;
		$RtoType(Model)$		
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $Model.DataType$? $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			set { _$Model.Field$ = value; } 
		} 


>>

AttributeBodySet(Model) ::=
<<


        private AggregateObservable<$Model.DataType$> _$Model.Field$ = default!;
		$RtoType(Model)$		
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		[ExcludeEmpty]		
        public $Model.Modifier$ ICollection<$Model.DataType$> $Model.Name$
        {
            get => _$Model.Field$;
            set => _$Model.Field$ = new AggregateObservable<$Model.DataType$>( this, nameof($Model.Name$), value );
        }

>>


AttributeBodyParent(Model) ::=
<<

		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $Model.DataType$ _$Model.Field$ = default!;
		$RtoType(Model)$		
		[Required]
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $Model.DataType$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			set { _$Model.Field$ = value; } 
		} 

		public void SetParent( object o )
		{
			if( o is $Model.DataType$ parent )
				Parent = parent;
			else
				Parent = null!;
		}

>>]]></template>
    </artifact>
    <artifact role="Rules" description="Automatic Validation rules">
      <output-file><![CDATA[E:\repository\fabrica\Fabrica.Work\Persistence\Rules\auto-rules.cs]]></output-file>
      <template><![CDATA[delimiters "$","$"


Assert(Model) ::= <<.Assert( m => m.$Model.Name$ )>>
AssertOver(Model) ::= <<.AssertOver( m => m.$Model.Name$ )>>


IsInPast(Model) ::= <<$Assert(Model)$.IsInPast()>>
IsInPastMessage(Model) ::= <<"$Model.Name$ may not be in the future">>

IsInFuture(Model) ::= <<$Assert(Model)$.IsInFuture()>>
IsInFutureMessage(Model) ::= <<"$Model.Name$ may not be in the past">>

IsEmail(Model) ::= <<$Assert(Model)$.IsEmail()>>
IsEmailMessage(Model) ::= <<"$Model.Name$ is not an e-mail address">>

IsPhone(Model) ::= <<$Assert(Model)$.IsPhone()>>
IsPhoneMessage(Model) ::= <<"$Model.Name$ is not a phone number">>

IsZip(Model) ::= <<$Assert(Model)$.IsZip()>>
IsZipMessage(Model) ::= <<"$Model.Name$ is not a Zip Code">>

IsSSN(Model) ::= <<$Assert(Model)$.IsSSN()>>
IsSSNMessage(Model) ::= <<"$Model.Name$ is not a Social Security Number">>

IsState(Model) ::= <<$Assert(Model)$.IsState()>>
IsStateMessage(Model) ::= <<"$Model.Name$ is not a US state or Canadian province">>

IsUSState(Model) ::= <<$Assert(Model)$.IsUSState()>>
IsUSStateMessage(Model) ::= <<"$Model.Name$ is not a US state">>


HasAtLeastOne(Model) ::= <<$AssertOver(Model)$.IsNotEmpty()>>
HasAtLeastOneMessage(Model) ::= <<"$Model.Name$ must have at least one $Model.DataType$">>


ValidatorImpl(Model) ::= <<$(Model.Validator)(Model)$>>
ValidatorMessage(Model) ::= <<$([Model.Validator,"Message"])(Model)$>>

ModuleOpen(Model) ::=
<<

// ReSharper disable CommentTypo
// ReSharper disable EmptyConstructor
// ReSharper disable StringLiteralTypo
// ReSharper disable UnusedMember.Global


/**************************************************************
AUTO GENERATED BY Fabrica Application Studio
DO NOT MODIFY THIS FILE
**************************************************************/


using Fabrica.Rules;
using Fabrica.Rules.Validators;
using Fabrica.Work.Persistence.Entities;

namespace Fabrica.Work.Persistence.Rules
{

>>

ModuleClose(Model) ::=
<<

}

>>


ModelOpen(Model) ::=
<<


    public sealed class Auto$Model.Name$Rules : RuleBuilder<$Model.Name$>
    {

	
		public Auto$Model.Name$Rules()
		{

>>


AttributeBody(Model) ::=
<<
$if(Model.Required)$

			AddValidation("$Model.Name$IsRequired")
				.Assert( m => m.$Model.Name$ ).Required()
				.Otherwise( "$Model.Name$ is required" );
				
$endif$
$if(Model.Validator)$

			AddValidation("$Model.Name$$Model.Validator$")
				$ValidatorImpl(Model)$
				.Otherwise( $ValidatorMessage(Model)$ );
				
$endif$
$if(Model.Expression)$

			AddValidation("$Model.Name$Matches")
				.Assert( m => m.$Model.Name$ ).IsMatch("$Model.Expression$")
				.Otherwise( "$Model.Name$ does match the valid form" );
				
$endif$
>>

AttributeBodySet(Model) ::=
<<

			AddValidation("Cascade$Model.Name$")
				.CascadeAll( m => m.$Model.Name$ );

$if(Model.Required)$

			AddValidation("$Model.Name$IsRequired")
				.Assert( m => m.$Model.Name$ ).Required()
				.Otherwise( "$Model.Name$ is required" );
				
$endif$
$if(Model.Validator)$

			AddValidation("$Model.Name$$Model.Validator$")
				$ValidatorImpl(Model)$
				.Otherwise( $ValidatorMessage(Model)$ );
				
$endif$
>>


ModelClose(Model) ::=
<<

		}

	}


>>




]]></template>
    </artifact>
    <artifact role="Model" description="SDK Models">
      <output-file><![CDATA[E:\repository\fabrica\Fabrica\Work\Models\auto-models.cs]]></output-file>
      <template><![CDATA[delimiters "$","$"




PrimaryKey(Model) ::= <<long>>
PrimaryKeyDefault(Model) ::= <<0>>

ForeignKey(Model) ::= <<long>>
ForeignKeyDefault(Model) ::= <<0>>

Uid(Model) ::= <<string>>
UidDefault(Model) ::= <<"">>

String(Model) ::= <<string>>
StringDefault(Model) ::= <<"">>

ShortString(Model) ::= <<string>>
ShortStringDefault(Model) ::= <<"">>

MediumString(Model) ::= <<string>>
MediumStringDefault(Model) ::= <<"">>

MediumText(Model) ::= <<string>>
MediumTextDefault(Model) ::= <<"">>

LongString(Model) ::= <<string>>
LongStringDefault(Model) ::= <<"">>

FullString(Model) ::= <<string>>
FullStringDefault(Model) ::= <<"">>

SecuredString(Model) ::= <<string>>
SecuredStringDefault(Model) ::= <<"">>

Note(Model) ::= <<string>>
NoteDefault(Model) ::= <<"">>


Integer(Model) ::= <<int>>
IntegerDefault(Model) ::= <<0>>

Long(Model) ::= <<long>>
LongDefault(Model) ::= <<0>>

Currency(Model) ::= <<decimal>>
CurrencyDefault(Model) ::= <<0>>

Decimal(Model) ::= <<decimal>>
DecimalDefault(Model) ::= <<0>>

DateTime(Model) ::= <<DateTime>>
DateTimeDefault(Model) ::= <<DateTime.MinValue>>

FutureDateTime(Model) ::= <<DateTime>>
FutureDateTimeDefault(Model) ::= <<DateTime.MaxValue>>

Boolean(Model) ::= <<bool>>
BooleanDefault(Model) ::= <<false>>

BooleanTrue(Model) ::= <<bool>>
BooleanTrueDefault(Model) ::= <<true>>

Code(Model) ::= <<string>>
CodeDefault(Model) ::= <<"">>


DataTypeName(Model) ::= <<$(Model.DataType)(Model)$>>
DataTypeDefault(Model) ::= <<$([Model.DataType,"Default"])(Model)$>>


OnPropertyChanged(Model) ::= <<		partial void On$Model.Name$Changed( $DataTypeName(Model)$ oldValue, $DataTypeName(Model)$ newValue );>>
OnExplicitPropertyChanged(Model) ::= <<		partial void On$Model.Name$Changed( $Model.DataType$ oldValue, $Model.DataType$ newValue );>>

RtoType(Model) ::= <<$if(Model.RtoScope)$[ModelMeta(Scope=PropertyScope.$Model.RtoScope$)]$else$ $endif$>>


ModelAttributeAlias(Model) ::= <<Alias=$if(Model.Alias)$"$Model.Alias$"$else$nameof($Model.Name$)$endif$>>
ModelAttributeResource(Model) ::= <<$if(Model.Resource)$, Resource="$Model.Resource$"$endif$>>
ModelAttributeReference(Model) ::= <<$if(Model.Reference)$, Reference=typeof($Model.Reference$)$endif$>>
ModelAttributeExplorer(Model) ::= <<$if(Model.Explorer)$, Explorer=typeof($Model.Explorer$)$endif$>>
ModelAttribute(Model) ::= <<[Model( $ModelAttributeAlias(Model)$$ModelAttributeResource(Model)$$ModelAttributeReference(Model)$$ModelAttributeExplorer(Model)$ )]>>

DetailsInit(Model) ::=
<<
$Model.Aggregates:AggregateMember()$
>>
AggregateMember(Model) ::= <<
$Model.Name$ = new Collection<$Model.DataType$>();

>>

Meta(Model) ::=
<<

public static class Meta
{
	$Model.AttributeNames:MetaMember()$
}

>>

MetaMember(Name) ::= <<public static readonly string $Name$ = "$Name$";

>>



ModuleOpen(Model) ::=
<<

// ReSharper disable CommentTypo
// ReSharper disable StringLiteralTypo
// ReSharper disable RedundantDefaultMemberInitializer
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable InconsistentNaming
// ReSharper disable ConvertToConstant.Local
// ReSharper disable FieldCanBeMadeReadOnly.Local
// ReSharper disable AutoPropertyCanBeMadeGetOnly.Local
// ReSharper disable ConvertToAutoProperty
// ReSharper disable UnusedParameter.Local
// ReSharper disable UnusedMember.Global
// ReSharper disable IdentifierTypo


/**************************************************************
AUTO GENERATED BY Fabrica Application Studio
DO NOT MODIFY THIS FILE
**************************************************************/


using System.ComponentModel;
using Fabrica.Models.Serialization;
using Fabrica.Models.Support;
using Fabrica.Utilities.Text;
using Newtonsoft.Json;

namespace Fabrica.Work.Models
{

>>

ModuleClose(Model) ::=
<<


}

>>


ModelOpen(Model) ::=
<<


	[JsonObject(MemberSerialization.OptIn)]
	$ModelAttribute(Model)$
    public partial class $Model.Name$ : BaseMutableModel<$Model.Name$>, INotifyPropertyChanged
    {

		
        public $Model.Name$(): this(false)
        {
					
        }

        public $Model.Name$( bool added )
        {

			SuspendTracking( m =>
			{
				$DetailsInit(Model)$
			});
		
            if( added )
                Added();
				
        }			
		
		
>>

ModelOpenRoot(Model) ::=
<<


	[JsonObject(MemberSerialization.OptIn)]
	$ModelAttribute(Model)$
    public partial class $Model.Name$ : BaseMutableModel<$Model.Name$>, IRootModel, INotifyPropertyChanged
    {

		
        public $Model.Name$(): this(false)
        {
					
        }

        public $Model.Name$( bool added )
        {

			SuspendTracking( m =>
			{
				$DetailsInit(Model)$
			});
		
            if( added )
                Added();
				
        }


>>


ModelOpenReference(Model) ::=
<<


	[JsonObject(MemberSerialization.OptIn)]
	$ModelAttribute(Model)$	
	public partial class $Model.Name$ : BaseReferenceModel, IExplorableModel
	{
		
		public $Model.Name$()
		{
		}
		
		public $Model.Name$( string uid, long id=0)
		{
			_uid = uid;
			_id  = id;
		}		

				
>>

ModelOpenAggregate(Model) ::=
<<


	[JsonObject(MemberSerialization.OptIn)]
	$ModelAttribute(Model)$	
    public partial class $Model.Name$ : BaseMutableModel<$Model.Name$>, IAggregateModel, INotifyPropertyChanged
    {

		
        public $Model.Name$(): this(false)
        {
					
        }

        public $Model.Name$( bool added )
        {

			SuspendTracking( m =>
			{
				$DetailsInit(Model)$
			});
		
            if( added )
                Added();
				
        }
		

>>


ModelOpenExplorableRoot(Model) ::=
<<


	[JsonObject(MemberSerialization.OptIn)]
	$ModelAttribute(Model)$
    public partial class $Model.Name$ : BaseMutableModel<$Model.Name$>, IRootModel, IExplorableModel, INotifyPropertyChanged
    {

				
        public $Model.Name$(): this(false)
        {
					
        }

        public $Model.Name$( bool added )
        {

			SuspendTracking( m =>
			{
				$DetailsInit(Model)$
			});
		
            if( added )
                Added();
				
        }
		
		
>>


ModelOpenExplorer(Model) ::=
<<


	[JsonObject(MemberSerialization.OptIn)]
	$ModelAttribute(Model)$	
    public partial class $Model.Name$ : BaseReferenceModel, IExplorableModel
    {

>>

ModelClose(Model) ::=
<<



	}		
	
	
>>


ModelCloseReference(Model) ::=
<<



	}		

	
>>


ModelCloseExplorer(Model) ::=
<<



	}		

	
>>

AttributeBody(Model) ::=
<<


		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $DataTypeName(Model)$ _$Model.Field$ = $DataTypeDefault(Model)$;
		$RtoType(Model)$		
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$ 
		{ 
			get { return _$Model.Field$; } 
			set { _$Model.Field$ = value; } 
		} 

>>


AttributeBodyDateTime(Model) ::=
<<


		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $DataTypeName(Model)$ _$Model.Field$ = $DataTypeDefault(Model)$;
		$RtoType(Model)$		
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			set { _$Model.Field$ = value; } 
		} 

		
>>


AttributeBodyId(Model) ::=
<<


        private long _$Model.Field$;
        public override $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			protected set { _$Model.Field$ = value; } 
		} 



>>

AttributeBodyVersion(Model) ::=
<<


		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $DataTypeName(Model)$ _$Model.Field$ = $DataTypeDefault(Model)$;
		$RtoType(Model)$
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			protected set { _$Model.Field$ = value; } 
		} 

>>

AttributeBodyUid(Model) ::=
<<


		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $DataTypeName(Model)$ _$Model.Field$ = Base62Converter.NewGuid();
		$RtoType(Model)$		
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public override $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			set { _$Model.Field$ = value; } 
		} 


>>

AttributeBodyReadonly(Model) ::=
<<

		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $DataTypeName(Model)$ _$Model.Field$ = $DataTypeDefault(Model)$;
		$RtoType(Model)$		
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			protected set { _$Model.Field$ = value; } 
		} 

>>

AttributeBodyReferenceReq(Model) ::=
<<

		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $Model.DataType$ _$Model.Field$ = default;
		$RtoType(Model)$		
		[Required]
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $Model.DataType$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			set { _$Model.Field$ = value; } 
		} 


>>

AttributeBodyReferenceOpt(Model) ::=
<<

		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $Model.DataType$ _$Model.Field$ = default;
		$RtoType(Model)$		
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $Model.DataType$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			set { _$Model.Field$ = value; } 
		} 


>>

AttributeBodySet(Model) ::=
<<


        private AggregateObservable<$Model.DataType$> _$Model.Field$=default;
		$RtoType(Model)$		
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		[ExcludeEmpty]		
        public $Model.Modifier$ ICollection<$Model.DataType$> $Model.Name$
        {
            get => _$Model.Field$;
            set => _$Model.Field$ = new AggregateObservable<$Model.DataType$>( this, nameof($Model.Name$), value );
        }

>>


AttributeBodyParent(Model) ::=
<<

		$if(Model.RtoInclude)$[JsonProperty("$Model.Name$")]$endif$
		private $Model.DataType$ _$Model.Field$ = default;
		$RtoType(Model)$		
		[Required]
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $Model.DataType$ $Model.Name$
		{ 
			get { return _$Model.Field$; } 
			set { _$Model.Field$ = value; } 
		} 

		public void SetParent( object o )
		{
			if( o is $Model.DataType$ parent )
				Parent = parent;
			else
				Parent = null;
		}

>>]]></template>
    </artifact>
    <artifact role="Rto" description="Rto models">
      <output-file><![CDATA[E:\repository\fabrica\Fabrica.Work\Endpoints\auto-deltas.cs]]></output-file>
      <template><![CDATA[delimiters "$","$"

PrimaryKey(Model) ::= <<long?>>

ForeignKey(Model) ::= <<long?>>

Uid(Model) ::= <<string>>

String(Model) ::= <<string?>>

ShortString(Model) ::= <<string?>>

MediumString(Model) ::= <<string?>>

MediumText(Model) ::= <<string?>>

LongString(Model) ::= <<string?>>

FullString(Model) ::= <<string?>>

SecuredString(Model) ::= <<string?>>

Note(Model) ::= <<string?>>

Integer(Model) ::= <<int?>>

Long(Model) ::= <<long?>>

Currency(Model) ::= <<decimal?>>

Decimal(Model) ::= <<decimal?>>

DateTime(Model) ::= <<DateTime?>>

FutureDateTime(Model) ::= <<DateTime?>>

Boolean(Model) ::= <<bool?>>

BooleanTrue(Model) ::= <<bool?>>

Code(Model) ::= <<string?>>

DataTypeName(Model) ::= <<$(Model.DataType)(Model)$>>

ModuleOpen(Model) ::=
<<

// ReSharper disable CommentTypo
// ReSharper disable IdentifierTypo
// ReSharper disable UnusedMember.Global

/**************************************************************
AUTO GENERATED BY Fabrica Application Studio
DO NOT MODIFY THIS FILE
**************************************************************/

using Fabrica.Models.Support;


namespace Fabrica.Work.Endpoints
{

>>

ModuleClose(Model) ::=
<<


}

>>


ModelOpen(Model) ::=
<<


    public class $Model.Name$Delta : BaseDelta
    {


>>



ModelClose(Model) ::=
<<



	}		

	
>>


AttributeBody(Model) ::=
<<

$if(Model.IsMutable)$
        $if(Model.Category)$[Category("$Model.Category$")]$endif$
        $if(Model.DisplayName)$[DisplayName("$Model.DisplayName$")]$endif$
        $if(Model.Description)$[Description("$Model.Description$")]$endif$
        $if(Model.ProperySortOrder)$[PropertySortOrder($Model.ProperySortOrder$)]$endif$
        public $Model.Modifier$ $DataTypeName(Model)$ $Model.Name$ { get; set; }
$endif$

>>

AttributeBodyReadonly(Model) ::=
<<
>>

AttributeBodyReference(Model) ::=
<<

$if(Model.IsMutable)$
        public $Model.Modifier$ string? $Model.Name$ { get; set; }
$endif$

>>

AttributeBodySet(Model) ::=
<<
>>


AttributeBodyParent(Model) ::=
<<
>>]]></template>
    </artifact>
  </artifacts>
  <roles>
    <role target="Model" name="Root" description="Root entity" reference="False" aggregate="False">
      <variants>
        <variant artifact="Entity" mapping="Root" />
      </variants>
    </role>
    <role target="Model" name="Reference" description="Reference to a Root" reference="False" aggregate="False">
      <variants>
        <variant artifact="Entity" mapping="Reference" />
        <variant artifact="Model" mapping="Reference" />
        <variant artifact="Rules" mapping="" ignore="true" />
        <variant artifact="Rto" mapping="" ignore="true" />
      </variants>
    </role>
    <role target="Model" name="Aggregate" description="Aggregate entity of a Root" reference="False" aggregate="False">
      <variants>
        <variant artifact="Entity" mapping="Aggregate" />
        <variant artifact="Model" mapping="Aggregate" />
      </variants>
    </role>
    <role target="Model" name="Explorer" description="Queryable versions of roots" reference="False" aggregate="False">
      <variants>
        <variant artifact="Entity" mapping="Explorer" />
        <variant artifact="Model" mapping="Explorer" />
        <variant artifact="Rto" mapping="" ignore="true" />
      </variants>
    </role>
    <role target="Model" name="ExplorableRoot" description="A root that can also be queried" reference="False" aggregate="False">
      <variants>
        <variant artifact="Entity" mapping="ExplorableRoot" />
      </variants>
    </role>
    <role target="Attribute" name="Data" description="Common data attribute" reference="False" aggregate="False" />
    <role target="Attribute" name="Identity" description="Primary Key" reference="False" aggregate="False">
      <variants>
        <variant artifact="Entity" mapping="Id" />
        <variant artifact="Model" mapping="Id" />
      </variants>
    </role>
    <role target="Attribute" name="Parent" description="The parent of an Aggregate" reference="False" aggregate="False">
      <variants>
        <variant artifact="Entity" mapping="Parent" />
        <variant artifact="Model" mapping="Parent" />
        <variant artifact="Rto" mapping="Parent" />
      </variants>
    </role>
    <role target="Attribute" name="ReferenceReq" description="Reference that can not be null" reference="True" aggregate="False">
      <variants>
        <variant artifact="Entity" mapping="ReferenceReq" />
        <variant artifact="Model" mapping="ReferenceReq" />
        <variant artifact="Rto" mapping="Reference" />
      </variants>
    </role>
    <role target="Attribute" name="ReferenceOpt" description="Reference that can be null" reference="True" aggregate="False">
      <variants>
        <variant artifact="Entity" mapping="ReferenceOpt" />
        <variant artifact="Model" mapping="ReferenceOpt" />
        <variant artifact="Rto" mapping="Reference" />
      </variants>
    </role>
    <role target="Attribute" name="Detail" description="Collection of Aggregated" reference="False" aggregate="True">
      <variants>
        <variant artifact="Entity" mapping="Set" />
        <variant artifact="Model" mapping="Set" />
        <variant artifact="Rto" mapping="Set" />
        <variant artifact="Rules" mapping="Set" />
      </variants>
    </role>
    <role target="Attribute" name="Version" description="Optimistic Locking" reference="False" aggregate="False">
      <variants>
        <variant artifact="Entity" mapping="Version" />
        <variant artifact="Model" mapping="Version" />
        <variant artifact="Rules" mapping="" ignore="true" />
      </variants>
    </role>
    <role target="Attribute" name="Uid" description="Unique object identifier" reference="False" aggregate="False">
      <variants>
        <variant artifact="Entity" mapping="Uid" />
        <variant artifact="Model" mapping="Uid" />
      </variants>
    </role>
  </roles>
  <variations>
    <variation model="Reference" attribute="Data">
      <variants>
        <variant artifact="Entity" mapping="Readonly" />
        <variant artifact="Model" mapping="Readonly" />
      </variants>
    </variation>
    <variation model="Reference" attribute="Identity">
      <variants>
        <variant artifact="Entity" mapping="Id" />
        <variant artifact="Model" mapping="Id" />
      </variants>
    </variation>
  </variations>
  <data-types>
    <data-type name="PrimaryKey" description="The data type for primary keys&#xD;&#xA;" group="Other" role="Identity" />
    <data-type name="String" description="Normal String" group="String" is-default="true" role="Data" />
    <data-type name="DateTime" description="Normal date" group="DateTime" role="Data" />
    <data-type name="Currency" description="Money datatype" group="Numeric" role="Data" />
    <data-type name="Boolean" description="True or False" group="Boolean" role="Data" />
    <data-type name="Integer" description="Integer data type" group="Numeric" role="Data" />
    <data-type name="Decimal" description="Decimal datatype" group="Numeric" role="Data" />
    <data-type name="Code" description="Data type for reference codes" group="Other" role="Data" />
    <data-type name="ShortString" description="Short Length String" group="String" role="Data" />
    <data-type name="MediumString" description="Medium Length String" group="String" role="Data" />
    <data-type name="FullString" description="Full Length String" group="String" role="Data" />
    <data-type name="LongString" description="Long Length String" group="String" role="Data" />
    <data-type name="ForeignKey" description="Foreign Key" group="Other" role="Data" />
    <data-type name="Long" description="Long data type" group="Numeric" role="" />
    <data-type name="Uid" description="Short GUID" group="Other" role="Uid" />
    <data-type name="Note" description="Note length string " group="String" role="" />
    <data-type name="SecuredString" description="Extra long string for storing Secured strings" group="String" role="Data" />
  </data-types>
  <validators>
    <validator name="IsEmail" description="Is the attribute a valid e-mail address" asserts-over="false" />
    <validator name="IsPhone" description="Is the attribute a valid phone number" asserts-over="false" />
    <validator name="IsInPast" description="Is the date in the past" asserts-over="false" />
    <validator name="IsInFuture" description="Is the date in the future" asserts-over="false" />
    <validator name="IsSSN" description="Is a Social Security Number" asserts-over="false" />
    <validator name="IsUSState" description="Is a valid US State abbreviation" asserts-over="false" />
    <validator name="IsState" description="Is a valid State including US and Canada" asserts-over="false" />
    <validator name="IsZip" description="Is a Zip code or Zip+4 code" asserts-over="false" />
    <validator name="HasAtLeastOne" description="Does the collection have at least one aggregate" asserts-over="false" />
  </validators>
  <module name="Main" description="Fabrica Telephony entities" assembly="Appliance" namespace="Fabrica.Telephony">
    <models>
      <model role="ExplorableRoot" name="WorkTopic" published="false">
        <variants />
        <attributes>
          <attribute role="Identity" name="Id" data-type="PrimaryKey" rto="Exclude" required="false" />
          <attribute role="Uid" name="Uid" data-type="Uid" rto="Immutable" required="true" />
          <attribute role="Data" name="Environment" data-type="Code" rto="" required="true" />
          <attribute role="Data" name="TenantUid" data-type="String" rto="" required="true" />
          <attribute role="Data" name="Topic" data-type="String" rto="" required="true" />
          <attribute role="Data" name="Description" data-type="String" rto="" required="true" />
          <attribute role="Data" name="Synchronous" data-type="Boolean" rto="" required="false" />
          <attribute role="Data" name="ClientName" data-type="String" rto="" required="false" />
          <attribute role="Data" name="Path" data-type="String" rto="" required="false" />
          <attribute role="Data" name="FullUrl" data-type="String" rto="" required="false" />
        </attributes>
      </model>
    </models>
  </module>
</project>